#include<bits/stdc++.h>
using namespace std;

class Book{
    private:
        string isbn;
        int copiesAvailable;
        int totalCopies;
    public:
        string title;
        string author;

        Book(string isbn,string title,string author,int copiesAvailable,int totalCopies)
        {
            this->isbn=isbn;
            this->title=title;
            this->author=author;
            this->copiesAvailable=copiesAvailable;
            this->totalCopies=totalCopies;
        }

        Book()
        {
            isbn="ISBN";
            title="UnknownTitle";
            author="UnknownAuthor";
            copiesAvailable=0;
            totalCopies=5;
        }

        Book(Book & b,string new_isbn)
        {
            this->title=b.title;
            this->author=b.author;
            this->isbn=new_isbn;
            this->copiesAvailable=b.copiesAvailable;
            this->totalCopies=b.totalCopies;
        }

        string getisbn()
        {
            return isbn;
        }

        int getcopiesAvailabe()
        {
            return copiesAvailable;
        }

        int gettotalCopies()
        {
            return totalCopies;
        }

        string getauthor()
        {
            return author;
        }

        string gettitle()
        {
            return title;
        }

        void setavlcopies(int copies)
        {
            copiesAvailable=copies;
        }
        void setupdateCount(int count)
        {
            if(totalCopies + count <0 || copiesAvailable + count<0)
            {
                cout<<"Invalid request! Count becomes negative"<<endl;
            }
            else
            {
            totalCopies+=count;
            copiesAvailable+=count;
            }
        }

        bool borrowBook()
        {
            if(copiesAvailable>0)
            {
                copiesAvailable--;
                return true;
            }
            else
            {
                cout<<"Invalid request! Copy of book not available"<<endl;
                return false;
            }
        }

        bool returnBook()
        {
            if(copiesAvailable<totalCopies)
            {
                copiesAvailable++;
                return true;
            }
            else
            {
                cout<<"Invalid request! Copy of book exceeds total copies"<<endl;
                return false;
            }
        }

        void printDetails()
        {
            cout<<title<<" "<<author<<endl;
        }


};

class Member{
    private:
        string memberID;
        int borrowLimit;
        map<string,int>borrowedBooks;
        int no_of_borrowedBooks;
    public:
        string name;

        string getmemberID()
        {
            return memberID;
        }

        int getborrowlimit()
        {
            return borrowLimit;
        }

        int getnoofbooksborrowed()
        {
            return no_of_borrowedBooks;
        }
        
        string getname()
        {
            return name;
        }

        bool checkbookborrowed(string isbn)
        {
            auto ptr=borrowedBooks.find(isbn);
            if(ptr!=borrowedBooks.end() && ptr->second>0)
            {
                return true;
            }
            else
            {
                return false;
            }
        }

        Member(string memberID,string name,int borrowLimit)
        {
            this->memberID=memberID;
            this->name=name;
            this->borrowLimit=borrowLimit;
            this->no_of_borrowedBooks=0;
        }

        Member(string memberID,string name)
        {
            this->memberID=memberID;
            this->name=name;
            this->borrowLimit=3;
            this->no_of_borrowedBooks=0;
        }

        bool borrowBook(string isbn)
        {
            if(no_of_borrowedBooks<borrowLimit)
            {
                borrowedBooks[isbn]++;
                no_of_borrowedBooks++;
                return true;
            }
            else
            {
                cout<<"Invalid request! Borrow limit exceeded"<<endl;
                return false;
            }
        }

        bool returnBook(string isbn)
        {
            if(no_of_borrowedBooks>0)
            {
                auto ptr=borrowedBooks.find(isbn);
                if(ptr!=borrowedBooks.end())
                {
                borrowedBooks[isbn]--;
                no_of_borrowedBooks--;

                if(borrowedBooks[isbn]<=0)
                {
                    borrowedBooks.erase(isbn);
                }

                return true;
            }
            }
            else
            {
                cout<<"Invalid request! Book not borrowed"<<endl;
            }
            return false;
        }

        void printDetails()
        {
          for(auto x=borrowedBooks.begin();x!=borrowedBooks.end();x++)
          {
            if(no_of_borrowedBooks>0)
            {
            cout<<memberID<<" "<<name<<" "<<x->first<<" "<<x->second<<endl;
            }
          /*else
            {
                cout<<"nothing"<<endl;
            }*/
          }            
        }
};

class Library{
    private:
        vector<Book>books;
        vector<Member>members;
    public:
        bool addBook(Book& b)
        {
         if(0<=b.getcopiesAvailabe() && b.getcopiesAvailabe()<=b.gettotalCopies())
         {

            if(books.size()==0)
            {
                books.push_back(b);
                return true;
            }
            else
            {
                for(size_t i=0;i<books.size();i++)
                {
                    if(b.getisbn()==books[i].getisbn())
                    {
                        cout<<"Invalid request! Book with same isbn already exists"<<endl;
                        return false;
                    }
                }
                books.push_back(b);
                return true;
            }
        }                    
        return false;
        }

        bool registerMember(Member & m)
        {
            if(members.size()==0)
            {
                members.push_back(m);
                return true;
            }
            else
            {
                for(size_t i=0;i<members.size();i++)
                {
                    if(m.getmemberID()==members[i].getmemberID())
                    {
                        cout<<"Invalid request! Member with same id already exists"<<endl;
                        return false;
                    }

                }
                members.push_back(m);
                return true;
            }
            return false;
        }

        bool borrowBook(string memberID,string isbn)
        {
            int avlcopies=0;
            int y=-1;
            for(size_t i=0;i<books.size();i++)
            {
                if(isbn==books[i].getisbn())
                {
                    avlcopies=books[i].getcopiesAvailabe();
                    y=i;
                }
            }

            int brrlimit=3;
            int no_of_booksbrr=0;
            int x=-1;

            for(size_t i=0;i<members.size();i++)
            {
                if(memberID==members[i].getmemberID())
                {
                    brrlimit=members[i].getborrowlimit();
                    no_of_booksbrr=members[i].getnoofbooksborrowed();
                    x=i;
                }
            }

            if(avlcopies>0)
            {
                if(no_of_booksbrr<brrlimit && y>=0 && x>=0)
                {

                    members[x].borrowBook(isbn);
                    books[y].setavlcopies(avlcopies-1);
                    return true;
                    
                }
                else
                {
                    cout<<"Invalid request! Borrow limit exceeded"<<endl;
                }
            }
            else
            {
                cout<<"Invalid request! Copy of book not available"<<endl;
            }

            return false;
        }

        bool returnBook(string memberID,string isbn)
        {
            int avlcopies=0;
            int totalcopies=0;
            int y=-1;
            for(size_t i=0;i<books.size();i++)
            {
                if(isbn==books[i].getisbn())
                {
                    avlcopies=books[i].getcopiesAvailabe();
                    totalcopies=books[i].gettotalCopies();
                    y=i;
                }
            }

            bool bookbrrwed=false;
            int x=-1;

            for(size_t i=0;i<members.size();i++)
            {
                if(memberID==members[i].getmemberID())
                {
                    bookbrrwed=members[i].checkbookborrowed(isbn);
                    x=i;
                }
            }

            if((avlcopies+1)<=totalcopies)
            {
                    if(bookbrrwed==true && x>=0 && y>=0)
                    {
                    members[x].returnBook(isbn);
                    books[y].setavlcopies(avlcopies+1);
                    return true;
                    }
                    else
                    {
                     cout<<"Invalid request! Book not borrowed"<<endl;
                    }
            }
            else
            {        
             cout<<"Invalid request! Copy of book exceeds total copies"<<endl;
            }
            return false;
        }

        void printDetails()
        {
            for(size_t i=0;i<books.size();i++)
            {
                cout<<books[i].gettitle()<<" "<<books[i].getauthor()<<" "<<books[i].getcopiesAvailabe()<<endl;
            }

            for(size_t i=0;i<members.size();i++)
            {
                cout<<members[i].getmemberID()<<" "<<members[i].getname()<<endl;
            }
        }

        Book* searchBook(string isbn)
        {
            for(size_t i=0;i<books.size();i++)
            {
                if(isbn==books[i].getisbn())
                {
                    return &books[i];
                }
            }
            return nullptr;
        }

        Member* searchmember(string memberid)
        {
            for(size_t i=0;i<members.size();i++)
            {
                if(memberid==members[i].getmemberID())
                {
                    return &members[i];
                }
            }
            return nullptr;
        }
};

int main(){
    Library l;

    string s=" ";


    while(s!="Done")
    {
        cin>>s;
        if(s=="Book")
        {
            string title;
            cin>>title;

            if(title=="None")
            {
                Book b;
                l.addBook(b);
            }

            else if(title=="ExistingBook")
            {
                string s1,s2;
                cin>>s1>>s2;
                Book* b=l.searchBook(s1);
                
                if(b)
                {
                Book bb(*b,s2);
                l.addBook(bb);
                }
            }

            else
            {
                string author,isbn;
                int avlcopies,totcopies;
                cin>>author>>isbn>>avlcopies>>totcopies;
                Book b(isbn,title,author,avlcopies,totcopies);
                l.addBook(b);
            }
        }

        if(s=="Member")
        {
            string s1;
            cin>>s1;
            if(s1=="NoBorrowLimit")
            {
                string memberid,name;
                cin>>memberid>>name;
                Member m(memberid,name);
                l.registerMember(m);
            }
            else
            {
                string name;
                int brrlimit;
                cin>>name>>brrlimit;
                Member m(s1,name,brrlimit);
                l.registerMember(m);
            }
        }

        if(s=="Borrow")
        {
            string memberid,isbn;
            cin>>memberid>>isbn;
            l.borrowBook(memberid,isbn);
        }

        if(s=="Return")
        {
            string memberid,isbn;
            cin>>memberid>>isbn;
            l.returnBook(memberid,isbn);
        }

        if(s=="PrintBook")
        {
            string isbn;
            cin>>isbn;
            Book *b=l.searchBook(isbn);
            if(b!=nullptr)
            {
            b->printDetails();
            }
        }

        if(s=="PrintMember")
        {
            string memberid;
            cin>>memberid;
            Member *m=l.searchmember(memberid);
            if(m!=nullptr)
            {
            m->printDetails();
            }
        }

        if(s=="PrintLibrary")
        {
            l.printDetails();
        }

        if(s=="UpdateCopiesCount")
        {
            string isbn;
            int copiesCount;

            cin>>isbn>>copiesCount;

            Book *b=l.searchBook(isbn);

            if(b)
            {
            b->setupdateCount(copiesCount);
            }

        }
    }
    return 0;
}
