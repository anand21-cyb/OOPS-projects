#include<iostream>
#include<cmath>
#include<vector>
#include<cfloat>
#include<algorithm>
using namespace std;

class rowComparator
{   
    public:
    bool ascending;

    rowComparator(bool x)
    {
        ascending=x;
    }

    bool operator()(long long int a,long long int b)
    {
        if(ascending)
        {
            return a<b;
        }
        else
        {
            return a>b;
        }
    }
};

    void for_merging(vector<long long int> &v,long long int vlower,long long int mid,long long int vupper,rowComparator &comp) 
    {
        long long int left_size=mid-vlower+1;
        long long int right_size=vupper-mid;

        vector<long long int>left(left_size);
        vector<long long int>right(right_size);

        for (long long int i=0;i<left_size;i++)
        {
            left[i]=v[vlower+i];
        }

        for (long long int j=0;j<right_size;j++)
        {
            right[j]=v[mid+1+j];
        }

        long long int i=0,j=0,k=vlower;

        while (i<left_size && j<right_size) 
        {
            if (comp(left[i],right[j])) 
            {
                v[k]=left[i];
                i++;
            } 
            else 
            {
                v[k]=right[j];
                j++;
            }
            k++;
        }

        while (i<left_size) {
            v[k]=left[i];
            i++;
            k++;
        }

        while (j<right_size) {
            v[k]=right[j];
            j++;
            k++;
        }
    }

    void kentaSort(vector<long long int> &v,long long int vlower,long long int vupper,rowComparator &comp) 
    {
        if (vlower<vupper) 
        {
            long long int mid=vlower+(vupper-vlower)/2;

            kentaSort(v,vlower,mid,comp);
            kentaSort(v,mid+1,vupper,comp);
            for_merging(v,vlower,mid,vupper,comp);
        }
    }


class whatever
{
    public:

        vector<vector<long long int>>matrix;
        long long int size;
        vector<vector<long long int>>closest_pair;

        void create_pairs(long long int x)
        {
            closest_pair.resize(x, vector<long long int>(2));
            for(long long int i=0;i<x;i++)
            {
                long long int a,b;
                cin>>a>>b;
                closest_pair[i][0]=a;
                closest_pair[i][1]=b;
            }
        }

        void create_matrix(long long int size)
        {
            this->size=size;
            matrix.resize(size, vector<long long int>(size));
            for(long long int i=0;i<size;i++)
            {
               for(long long int j=0;j<size;j++)
                {
                    int x;
                    cin>>x;
                    matrix[i][j]=x;
                }
            }
        }

        void display()
        {
            for(long long int i=0;i<size;i++)
            {
                for(long long int j=0;j<size;j++)
                {
                    cout<<matrix[i][j]<<" ";
                }
                cout<<endl;
            }
        }
        
        void sortRows(rowComparator& comp) 
        {
            for (size_t i = 0; i < matrix.size(); i++) 
            { 
                kentaSort(matrix[i],0,matrix[i].size()-1,comp);
            }
        }
        
        long long int mergeCount(vector<long long int>& arr,long long int lower,long long int mid,long long int upper) 
        {
            vector<long long int>left(mid-lower+1); 
            vector<long long int>right(upper-mid);  
            for (size_t i=0;i<left.size();i++) {
                left[i]=arr[lower+i];
            }

            for (size_t j=0;j<right.size();j++) {
                right[j]=arr[mid+1+j];
            }

            size_t i=0,j=0,k=lower;
            long long int inversions = 0;
        
            while (i<left.size() && j<right.size()) 
            {
                if (left[i]<=right[j]) 
                {
                    arr[k++]=left[i++];
                } 
                else 
                {
                    arr[k++]=right[j++]; 
                    inversions=inversions+(left.size()-i);
                }
            }
        
            
            while (i<left.size())
            {
                 arr[k++]=left[i++];
            }
        
            
            while (j<right.size()) 
            {
                arr[k++]=right[j++];
            }
        
            return inversions;
        }
        
        long long int count(vector<long long int> &flattened_array,long long int lower,long long int upper)
        {
            if(lower>=upper)
            {
                return 0;
            }

            long long int mid=lower+(upper-lower)/2;
            long long int inversions=0;

            inversions=inversions+count(flattened_array,lower,mid);
            inversions=inversions+count(flattened_array,mid+1,upper);
            inversions=inversions+mergeCount(flattened_array, lower, mid, upper);

            return inversions;
        }

        long long int countInversions()
        {
            vector<long long int>a;
            //a.reserve(size * size);
            for(long long int i=0;i<size;i++)
            {
                for(long long int j=0;j<size;j++)
                {
                    a.push_back(matrix[i][j]);
                }
            }

            long long value=count(a,0,(size*size)-1);

            return value;
            
        }

        long double distance(const vector<long long int>& p1, const vector<long long int>& p2) 
        {
            return sqrt((p1[0] - p2[0]) * (p1[0] - p2[0]) + (p1[1] - p2[1]) * (p1[1] - p2[1]));
        }
        
        bool checkingpair(const vector<long long int>& new_p1,const vector<long long int>& new_p2, 
            const vector<long long int>& cur_p1,const vector<long long int>& cur_p2, 
            long double newDist,long double curDist) 
        {
            if (newDist<curDist) 
            {
                return true;
            }
            if (newDist>curDist) 
            {
                return false;
            }

            if (new_p1[0]<cur_p1[0]) 
            {
                return true;
            }

            if (new_p1[0]>cur_p1[0]) 
            {
                return false;
            }

            if (new_p1[1]<cur_p1[1]) 
            {
                return true;
            }

            if (new_p1[1]>cur_p1[1]) 
            {
                return false;
            }

            if (new_p2[0]<cur_p2[0]) 
            {
                return true;
            }

            if (new_p2[0]>cur_p2[0])
            {
                return false;
            }

            if (new_p2[1]<cur_p2[1]) 
            {
                return true;
            }

            return false;
        }

        long double trivial_method(vector<vector<long long int>>& set_of_points,int lower,int upper,vector<long long int>&p1,vector<long long int>& p2) 
        {
            long double minDist=LDBL_MAX;
            for (int i=lower;i<upper;++i) 
            {
                for (int j=i+1;j<=upper;++j) 
                {
                    long double d=distance(set_of_points[i],set_of_points[j]);
                    if (checkingpair(set_of_points[i], set_of_points[j], p1, p2, d, minDist)) 
                    {
                        minDist=d;
                        p1=set_of_points[i];
                        p2=set_of_points[j];
                    }
                }
            }
            return minDist;
        }
        
        long double DC_method(vector<vector<long long int>>&set_of_points,int left,int right,vector<long long int>& p1,vector<long long int>& p2) 
        {
            if (right-left<=3) 
            {
                return trivial_method(set_of_points,left,right,p1,p2);
            }
            
            int mid=left+(right-left)/2;
            long long int midX=set_of_points[mid][0];
            
            vector<long long int> left_p1,left_p2,right_p1,right_p2;
            long double leftDist = DC_method(set_of_points,left,mid,left_p1,left_p2);
            long double rightDist = DC_method(set_of_points,mid+1,right,right_p1,right_p2);
            
            long double minDist;
            if (checkingpair(left_p1, left_p2, right_p1, right_p2, leftDist, rightDist)) 
            {
                minDist=leftDist;
                p1=left_p1;
                p2=left_p2;
            } 

            else 
            {
                minDist=rightDist;
                p1=right_p1;
                p2=right_p2;
            }
            
            vector<vector<long long int>> remaining_points;
            remaining_points.reserve(right - left + 1);

            for (int i=left;i<=right;i++) 
            {
                if (abs(set_of_points[i][0]-midX)<minDist) 
                {
                    remaining_points.push_back(set_of_points[i]);
                }
            }
            
            sort(remaining_points.begin(),remaining_points.end(),[](const vector<long long int>& a,const vector<long long int>& b) 
            {
                return a[1]<b[1];
            });
            
            for (size_t i=0;i<remaining_points.size();i++) 
            {
                for (size_t j=i+1;j<remaining_points.size() && (remaining_points[j][1]-remaining_points[i][1])<minDist;j++) 
                {
                    long double d=distance(remaining_points[i],remaining_points[j]);
                    if (checkingpair(remaining_points[i],remaining_points[j],p1,p2,d,minDist)) 
                    {
                        minDist=d;
                        p1=remaining_points[i];
                        p2=remaining_points[j];
                    }
                }
            } 
            return minDist;
        }
        
        void closestPair() 
        {
            if (closest_pair.empty()) 
            {
                return;
            }
            vector<vector<long long int>> original_order=closest_pair;
            sort(closest_pair.begin(), closest_pair.end());
            vector<long long int>p1,p2;
            DC_method(closest_pair,0,closest_pair.size()-1,p1,p2); 
            
            auto first1=find(original_order.begin(), original_order.end(), p1);
            auto second2=find(original_order.begin(), original_order.end(), p2);
        
            if (first1>second2) 
            {
                swap(p1,p2);
            }
            cout<<p1[0]<<" "<<p1[1]<<" "<<p2[0]<<" "<<p2[1]<<endl;
        }

};

int main()
{   
    whatever cls;
    vector<vector<long long int>>matrix;
    string command=" ";

    while(command!="END")
    {
    
        cin>>command;

        if(command=="CREATE_2D")
        {
            long long int matrix_size;
            cin>>matrix_size;
            cls.create_matrix(matrix_size);
        }

        else if(command=="SORT_2D")
        {
            string order;
            cin>>order;

            if(order=="ascending")
            {
                rowComparator rc(true);
                cls.sortRows(rc);
            }

            else
            {
                rowComparator rc(false);
                cls.sortRows(rc);
            }
        }

        else if(command=="INVERSION_2D")
        {
            long long int inversions=cls.countInversions();
            cout<<inversions<<endl;
        }

        else if(command=="DISPLAY_2D")
        {
            cls.display();
        }

        else if(command=="CLOSEST_2D")
        {
            long long int x;
            cin>>x;
            cls.create_pairs(x);
            cls.closestPair();
        }
        else
        {
            break;
        }
    }
    return 0;
}
