#include<bits/stdc++.h>
using namespace std;
#define ll long long int
#define ld long double

class CARD
{
    public:
        virtual ll getarea(){return 0;}
        virtual bool operator<(CARD *c){ return this->getarea()<c->getarea();}
        friend istream & operator>>(istream & stream,CARD &c){return stream;}
        virtual ostream& print(ostream& stream){return stream;}
        friend ostream & operator<<(ostream & stream, CARD &c){return c.print(stream);}
};

class SQUARE :public CARD
{
    private:
        ll side;
    public:
        SQUARE()
        {
            side=0;
        }
        ll getarea(){return (side*side);}

        friend istream& operator >> (istream& stream, SQUARE &S) 
        {
            cin>>S.side;
            return stream;
        }

        ostream& print(ostream& stream)
        {
            stream<<"SQUARE "<<side;
            return stream;
        }
};

class RECTANGLE :public CARD
{
    private:
        ll breadth,length;
    public:
        RECTANGLE()
        {
            breadth=0;
            length=0;
        }

        ll getarea(){return (breadth*length);}

        friend istream& operator >> (istream& stream, RECTANGLE &R) 
        {
            cin>>R.length>>R.breadth;
            return stream;
        }

        ostream& print(ostream& stream)
        {
            stream<<"RECTANGLE "<<length<<" "<<breadth;
            return stream;
        }
};

class TRIANGLE :public CARD
{
    private:
        ll base,height;
    public:
        TRIANGLE()
        {
            base=0;
            height=0;
        }

        ll getarea(){return (base*height)/2;}

        friend istream& operator >> (istream& stream, TRIANGLE &T) 
        {
            cin>>T.base>>T.height;
            return stream;
        }

        ostream& print(ostream& stream)
        {
            stream<<"TRIANGLE "<<base<<" "<<height;
            return stream;
        }
};

class CardOrganiser
{
    public:
        vector<CARD *>cards;
        vector<ll>pileTops;

        vector<CARD *>cachedLIS;
        bool lisdone=true;

        vector<CARD *> getcards(){return cards;}

        void addCard(CARD *c) 
        {
            ll a=c->getarea();
            auto it=lower_bound(pileTops.begin(), pileTops.end(), a);
            if(it==pileTops.end()) 
            {
                pileTops.push_back(a);
            } 
            else 
            {
                *it=a;
            }
        }

        size_t getPileCount()
        {
            return pileTops.size();
        }

        vector<CARD*> getLIS()
        {
            if(!lisdone) return cachedLIS;

            if(cards.empty()) return {};

            vector<ll> dp;
            vector<size_t> parent(cards.size());
            vector<size_t> lisIndices;

            for(size_t i=0;i<cards.size();++i) 
            {
                ll area=cards[i]->getarea();
                auto it=lower_bound(dp.begin(), dp.end(), area);
                size_t pos=it - dp.begin();

                if(it==dp.end()) 
                {
                    dp.push_back(area);
                    lisIndices.push_back(i);
                } 
                else 
                {
                    *it=area;
                    lisIndices[pos]=i;
                }
                parent[i]=(pos > 0) ? lisIndices[pos-1] : i;
            }

            vector<CARD*> lis;
            for(size_t i=lisIndices.back(); ; i=parent[i]) 
            {
                lis.push_back(cards[i]);
                if(i==parent[i]) break;
            }
            reverse(lis.begin(),lis.end());

            cachedLIS=lis;
            lisdone=false;

            return lis;
        }

        void normalAddCard(CARD *C)
        {
            cards.push_back(C);
            lisdone=true;
        }
};

int main()
{
    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    CardOrganiser co;
    ll q;
    cin>>q;
    for(ll i=0;i<q;i++)
    {
        ll type;
        cin>>type;

        if(type==1)
        {
            string polygon;
            cin>>polygon;

            if(polygon=="SQUARE")
            {
                SQUARE *S=new SQUARE();
                cin>>*S;
                co.normalAddCard(S);
                co.addCard(S);
            }
            else if(polygon=="RECTANGLE")
            {
                RECTANGLE *R=new RECTANGLE();
                cin>>*R;
                co.normalAddCard(R);
                co.addCard(R);
            }
            else if(polygon=="TRIANGLE") 
            {
                TRIANGLE *T=new TRIANGLE();
                cin>>*T;
                co.normalAddCard(T);
                co.addCard(T);
            }
            else
            {
                break;
            }
        }
        else if(type==2)
        {
            cout<<co.getPileCount()<<"\n";
        }
        else if(type==3)
        {
            vector<CARD *>lis=co.getLIS();
            cout<<lis.size()<<"\n";
            for(CARD *c : lis)
            {
                cout<<*c<<"\n";
            }
        }
        else
        {
            break;
        }
    }
    return 0;
}
