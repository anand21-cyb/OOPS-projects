#include<bits/stdc++.h>
using namespace std;
#define ll long long int

class Node 
{
    public:
    string node;
    ll dist;
    int parity;
    
    bool operator>(const Node& other) const 
    {
        return dist>other.dist;
    }
};

template<typename T, typename Compare = greater<T>>
class prior_queue 
{
private:
    vector<T> arr;
    Compare comp;

public:
    prior_queue() : comp(Compare()) {}

    bool empty() const 
    {
        return arr.empty();
    }

    size_t size() const 
    {
        return arr.size();
    }

    const T& top() const 
    {
        return arr.front();
    }

    void push(const T& value) 
    {
        arr.push_back(value);
        size_t n=arr.size() - 1;
        while (n>0) {
            size_t parent=(n-1)/2;
            if (comp(arr[parent],arr[n])) 
            {
                swap(arr[parent],arr[n]);
                n=parent;
            } 
            else {break;}
        }
    }

    void pop() 
    {
        if (arr.empty()) return;
        arr[0]=arr.back();
        arr.pop_back();
        size_t idx=0;
        while (1) 
        {
            size_t left=2*idx+1;
            size_t right=2*idx+2;
            size_t smallest=idx;

            if (left<arr.size() && comp(arr[smallest],arr[left])) {smallest = left;}
            if (right<arr.size() && comp(arr[smallest],arr[right])) {smallest = right;}

            if (smallest!=idx) 
            {
                swap(arr[idx],arr[smallest]);
                idx=smallest;
            } else 
            {
                break;
            }
        }
    }
};

ll find_min_path(vector<unordered_map<string,ll>>& graph,unordered_map<string,int>& node_index,string s_id,string d_id) 
{
    if(s_id==d_id) return 0;

    int n=graph.size();
    vector<vector<ll>> dist(n,vector<ll>(2,LLONG_MAX));
    prior_queue<Node> prior_queues;

    int s=node_index[s_id];
    dist[s][0]=0;
    prior_queues.push({s_id,0,0});

    while(!prior_queues.empty()) 
    {
        Node cur=prior_queues.top();
        prior_queues.pop();
        
        int u=node_index[cur.node];
        if(cur.dist>dist[u][cur.parity]) continue;
        if(cur.node==d_id && cur.parity==0) return cur.dist;

        for(auto& edge:graph[u]) 
        {
            string v=edge.first;
            ll weight=edge.second;
            int new_parity=1-cur.parity;
            ll new_dist=cur.dist + weight;
            
            int vi=node_index[v];
            if(new_dist<dist[vi][new_parity]) 
            {
                dist[vi][new_parity]=new_dist;
                prior_queues.push({v,new_dist,new_parity});
            }
        }
    }  
    return -1;
}

int main() 
{
    ll n,m;
    cin>>n>>m;
    
    unordered_map<string, int>node_index;
    vector<string>nodes(n);
    vector<unordered_map<string,ll>>graph(n);
    
    for(int i=0;i<n;i++) 
    {
        cin>>nodes[i];
        node_index[nodes[i]]=i;
    }

    for(int i=0;i<m;i++) 
    {
        string u,v;
        ll w;
        cin>>u>>v>>w;
        graph[node_index[u]][v]=w;
        graph[node_index[v]][u]=w;
    }

    string source,dest;
    cin>>source>>dest;

    cout<<find_min_path(graph,node_index,source,dest)<<endl;
    
    return 0;
}
